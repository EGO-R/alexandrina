/*
 * This file is generated by jOOQ.
 */
package org.mirea.backend.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.mirea.backend.jooq.generated.Keys;
import org.mirea.backend.jooq.generated.Public;
import org.mirea.backend.jooq.generated.tables.PlaylistVideo.PlaylistVideoPath;
import org.mirea.backend.jooq.generated.tables.Users.UsersPath;
import org.mirea.backend.jooq.generated.tables.records.VideosRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Videos extends TableImpl<VideosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.videos</code>
     */
    public static final Videos VIDEOS = new Videos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VideosRecord> getRecordType() {
        return VideosRecord.class;
    }

    /**
     * The column <code>public.videos.id</code>.
     */
    public final TableField<VideosRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.videos.name</code>.
     */
    public final TableField<VideosRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.videos.preview</code>.
     */
    public final TableField<VideosRecord, String> PREVIEW = createField(DSL.name("preview"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.videos.video_url</code>.
     */
    public final TableField<VideosRecord, String> VIDEO_URL = createField(DSL.name("video_url"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.videos.user_id</code>.
     */
    public final TableField<VideosRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.videos.privacy_type</code>.
     */
    public final TableField<VideosRecord, Integer> PRIVACY_TYPE = createField(DSL.name("privacy_type"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.videos.created_at</code>.
     */
    public final TableField<VideosRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.videos.updated_at</code>.
     */
    public final TableField<VideosRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Videos(Name alias, Table<VideosRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Videos(Name alias, Table<VideosRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.videos</code> table reference
     */
    public Videos(String alias) {
        this(DSL.name(alias), VIDEOS);
    }

    /**
     * Create an aliased <code>public.videos</code> table reference
     */
    public Videos(Name alias) {
        this(alias, VIDEOS);
    }

    /**
     * Create a <code>public.videos</code> table reference
     */
    public Videos() {
        this(DSL.name("videos"), null);
    }

    public <O extends Record> Videos(Table<O> path, ForeignKey<O, VideosRecord> childPath, InverseForeignKey<O, VideosRecord> parentPath) {
        super(path, childPath, parentPath, VIDEOS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class VideosPath extends Videos implements Path<VideosRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> VideosPath(Table<O> path, ForeignKey<O, VideosRecord> childPath, InverseForeignKey<O, VideosRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private VideosPath(Name alias, Table<VideosRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public VideosPath as(String alias) {
            return new VideosPath(DSL.name(alias), this);
        }

        @Override
        public VideosPath as(Name alias) {
            return new VideosPath(alias, this);
        }

        @Override
        public VideosPath as(Table<?> alias) {
            return new VideosPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<VideosRecord, Long> getIdentity() {
        return (Identity<VideosRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VideosRecord> getPrimaryKey() {
        return Keys.VIDEOS_PKEY;
    }

    @Override
    public List<UniqueKey<VideosRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.VIDEOS_PREVIEW_KEY, Keys.VIDEOS_VIDEO_URL_KEY);
    }

    @Override
    public List<ForeignKey<VideosRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VIDEOS__VIDEOS_USER_ID_FKEY);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.VIDEOS__VIDEOS_USER_ID_FKEY, null);

        return _users;
    }

    private transient PlaylistVideoPath _playlistVideo;

    /**
     * Get the implicit to-many join path to the
     * <code>public.playlist_video</code> table
     */
    public PlaylistVideoPath playlistVideo() {
        if (_playlistVideo == null)
            _playlistVideo = new PlaylistVideoPath(this, null, Keys.PLAYLIST_VIDEO__PLAYLIST_VIDEO_VIDEO_ID_FKEY.getInverseKey());

        return _playlistVideo;
    }

    @Override
    public Videos as(String alias) {
        return new Videos(DSL.name(alias), this);
    }

    @Override
    public Videos as(Name alias) {
        return new Videos(alias, this);
    }

    @Override
    public Videos as(Table<?> alias) {
        return new Videos(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Videos rename(String name) {
        return new Videos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Videos rename(Name name) {
        return new Videos(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Videos rename(Table<?> name) {
        return new Videos(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Videos where(Condition condition) {
        return new Videos(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Videos where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Videos where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Videos where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Videos where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Videos where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Videos where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Videos where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Videos whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Videos whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
