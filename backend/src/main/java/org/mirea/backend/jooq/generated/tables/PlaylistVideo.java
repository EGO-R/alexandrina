/*
 * This file is generated by jOOQ.
 */
package org.mirea.backend.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.mirea.backend.jooq.generated.Keys;
import org.mirea.backend.jooq.generated.Public;
import org.mirea.backend.jooq.generated.tables.Playlists.PlaylistsPath;
import org.mirea.backend.jooq.generated.tables.Videos.VideosPath;
import org.mirea.backend.jooq.generated.tables.records.PlaylistVideoRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PlaylistVideo extends TableImpl<PlaylistVideoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.playlist_video</code>
     */
    public static final PlaylistVideo PLAYLIST_VIDEO = new PlaylistVideo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlaylistVideoRecord> getRecordType() {
        return PlaylistVideoRecord.class;
    }

    /**
     * The column <code>public.playlist_video.video_id</code>.
     */
    public final TableField<PlaylistVideoRecord, Long> VIDEO_ID = createField(DSL.name("video_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.playlist_video.playlist_id</code>.
     */
    public final TableField<PlaylistVideoRecord, Long> PLAYLIST_ID = createField(DSL.name("playlist_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.playlist_video.created_at</code>.
     */
    public final TableField<PlaylistVideoRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.playlist_video.updated_at</code>.
     */
    public final TableField<PlaylistVideoRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private PlaylistVideo(Name alias, Table<PlaylistVideoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PlaylistVideo(Name alias, Table<PlaylistVideoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.playlist_video</code> table reference
     */
    public PlaylistVideo(String alias) {
        this(DSL.name(alias), PLAYLIST_VIDEO);
    }

    /**
     * Create an aliased <code>public.playlist_video</code> table reference
     */
    public PlaylistVideo(Name alias) {
        this(alias, PLAYLIST_VIDEO);
    }

    /**
     * Create a <code>public.playlist_video</code> table reference
     */
    public PlaylistVideo() {
        this(DSL.name("playlist_video"), null);
    }

    public <O extends Record> PlaylistVideo(Table<O> path, ForeignKey<O, PlaylistVideoRecord> childPath, InverseForeignKey<O, PlaylistVideoRecord> parentPath) {
        super(path, childPath, parentPath, PLAYLIST_VIDEO);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PlaylistVideoPath extends PlaylistVideo implements Path<PlaylistVideoRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PlaylistVideoPath(Table<O> path, ForeignKey<O, PlaylistVideoRecord> childPath, InverseForeignKey<O, PlaylistVideoRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PlaylistVideoPath(Name alias, Table<PlaylistVideoRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PlaylistVideoPath as(String alias) {
            return new PlaylistVideoPath(DSL.name(alias), this);
        }

        @Override
        public PlaylistVideoPath as(Name alias) {
            return new PlaylistVideoPath(alias, this);
        }

        @Override
        public PlaylistVideoPath as(Table<?> alias) {
            return new PlaylistVideoPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<PlaylistVideoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PLAYLIST_VIDEO__PLAYLIST_VIDEO_VIDEO_ID_FKEY, Keys.PLAYLIST_VIDEO__PLAYLIST_VIDEO_PLAYLIST_ID_FKEY);
    }

    private transient VideosPath _videos;

    /**
     * Get the implicit join path to the <code>public.videos</code> table.
     */
    public VideosPath videos() {
        if (_videos == null)
            _videos = new VideosPath(this, Keys.PLAYLIST_VIDEO__PLAYLIST_VIDEO_VIDEO_ID_FKEY, null);

        return _videos;
    }

    private transient PlaylistsPath _playlists;

    /**
     * Get the implicit join path to the <code>public.playlists</code> table.
     */
    public PlaylistsPath playlists() {
        if (_playlists == null)
            _playlists = new PlaylistsPath(this, Keys.PLAYLIST_VIDEO__PLAYLIST_VIDEO_PLAYLIST_ID_FKEY, null);

        return _playlists;
    }

    @Override
    public PlaylistVideo as(String alias) {
        return new PlaylistVideo(DSL.name(alias), this);
    }

    @Override
    public PlaylistVideo as(Name alias) {
        return new PlaylistVideo(alias, this);
    }

    @Override
    public PlaylistVideo as(Table<?> alias) {
        return new PlaylistVideo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaylistVideo rename(String name) {
        return new PlaylistVideo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaylistVideo rename(Name name) {
        return new PlaylistVideo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaylistVideo rename(Table<?> name) {
        return new PlaylistVideo(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlaylistVideo where(Condition condition) {
        return new PlaylistVideo(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlaylistVideo where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlaylistVideo where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlaylistVideo where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlaylistVideo where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlaylistVideo where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlaylistVideo where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlaylistVideo where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlaylistVideo whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlaylistVideo whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
